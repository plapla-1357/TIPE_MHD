import matplotlib.pyplot as plt
import numpy as np
import csv
import pandas as pd

def getFile(name:str):
    # le fichier doit etre prealablement formaté
    data = pd.read_csv(name)
    data.head()
    data = data.dropna()
    data = data.reset_index(drop=True)
    print(data)
    return data

def norme(data):
    return np.sqrt(data["x"]**2 + data["y"]**2)

def normeXY(X, Y):
    return np.sqrt(X**2 + Y**2)

def filtreMoy(X, n):
    def moy(l):
        return sum(l)/len(l)
    return np.array([X[i] if i<=n or i>=len(X)-n else moy(X[i-n:i+n]) for i in range(len(X))])

def integre(X, T, n):
    return np.array([(X[i-n] - X[i+n])/(T[i-n] - T[i+n]) for i in range(n, len(X)-n)])

def integreXY(X, Y, T, n):
    v_x = integre(X, T, n)
    v_y = integre(Y, T, n)
    return normeXY(v_x, v_y)

def reg(*args):
    def reg2(x):
        return sum([args[i]*x**(len(args) - i -1) for i in range(len(args))])
    return reg2

def linear_regOrignStart(X, Y, n):
    i_start = next((i for i, x in enumerate(X) if x > 0), None)
    if i_start is None:
        raise ValueError("No positive value found in X.")
    return np.polyfit(X[i_start:], Y[i_start:], n)
    

def regresion(X, Y): # todo
    pass


def show_datas(data):
     # Calcul de la vitesse
    vitesse = integreXY(data["x"], data["y"], data["t"], 10)

    # Création d'une nouvelle figure pour afficher la vitesse et l'accélération côte à côte
    plt.figure(figsize=(12, 6))

    # Sous-figure pour la vitesse
    plt.subplot(1, 2, 1)
    # plt.plot(data["t"], data["v"], "+-")
    plt.plot(data["t"][10:-10], vitesse, "g-")
    a, b = np.polyfit(data["t"][10:-10], vitesse, 1)
    plt.plot(data["t"][10:-10], reg(a, b)(data["t"][10:-10]), "r--")
    plt.title("Vitesse en fonction du temps")
    plt.xlabel("Temps (t)")
    plt.ylabel("Vitesse (v)")
    plt.legend(["Vitesse", "y = {:.3f}x + {:.3f}".format(a, b)])
    plt.grid()

    # Sous-figure pour l'accélération
    plt.subplot(1, 2, 2)
    plt.plot(data["t"], filtreMoy(data["a"], 5))
    plt.plot(data["t"], data["a"])
    plt.title("Accélération filtrée et brute en fonction du temps")
    plt.xlabel("Temps (t)")
    plt.ylabel("Accélération (a)")
    plt.legend(["Accélération filtrée", "Accélération brute"])
    plt.grid()
    plt.text(0, 1.30, f"acceleration moyenne = {np.sum(data["a"])/len(data["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data["a"]): .3f}"+ " $m.s^{-2}$")
    
    
    


def compare_data(data1, data2, t_debut1 = 0, t_debut2 = 0, desc1 = "", desc2 = ""):
     # Calcul de la vitesse
    vitesse1 = integreXY(data1["x"], data1["y"], data1["t"], 10)
    vitesse2 = integreXY(data2["x"], data2["y"], data2["t"], 10)

    # Création d'une nouvelle figure pour afficher la vitesse et l'accélération côte à côte
    plt.figure(figsize=(12, 6))

    # Sous-figure pour la vitesse
    plt.subplot(1, 2, 1)
    # plt.plot(data["t"], data["v"], "+-")
    plt.plot(data1["t"][10:-10] - t_debut1, vitesse1, "r-")
    a, b = linear_regOrignStart(data1["t"][10:-10]-t_debut1, vitesse1, 1)
    plt.plot(data1["t"][10:-10]- t_debut1, reg(a, b)(data1["t"][10:-10]-t_debut1), "--", color="red")
    plt.plot(data2["t"][10:-10] - t_debut2, vitesse2, "b-")
    c, d = linear_regOrignStart(data2["t"][10:-10]-t_debut2, vitesse2, 1)
    plt.plot(data2["t"][10:-10]- t_debut2, reg(c, d)(data2["t"][10:-10]-t_debut2), "c--")
    plt.title("Vitesse en fonction du temps")
    plt.xlabel("Temps (s)")
    plt.ylabel("Vitesse ($m.s^{-1}$)")
    plt.legend([desc1, "y = {:.6f}x + {:.6f}".format(a, b), desc2, "y = {:.6f}x + {:.6f}".format(c, d)])
    plt.grid()

    # Sous-figure pour l'accélération
    plt.subplot(1, 2, 2)
    
    plt.plot(data1["t"], filtreMoy(data1["a"], 5))
    # plt.plot(data1["t"], data1["a"])
    plt.plot(data2["t"], filtreMoy(data2["a"], 5))
    # plt.plot(data2["t"], data2["a"])
    plt.title("Accélération filtrée et brute en fonction du temps")
    plt.xlabel("Temps (s)")
    plt.ylabel("Accélération ($m.s^{-2}$)")
    plt.legend(["accélération filtrée 1", "accélération brute 1", "accélération filtrée 2", "accélération brute 2"])
    plt.legend([desc1, desc2])
    plt.grid()
    # plt.text(0, 1.30, f"acceleration moyenne = {np.sum(data1["a"])/len(data1["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data1["a"]): .3f}"+ " $m.s^{-2}$")
    # plt.text(0, 1, f"acceleration moyenne = {np.sum(data2["a"])/len(data2["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data2["a"]): .3f}"+ " $m.s^{-2}$")    
    

def compare_datas(*args, **kwargs):    
    n = len(args)
    vitesses = []
    for i in range(1, n+1):
        vitesses.append(integreXY(args[i-1]["x"], args[i-1]["y"], args[i-1]["t"], 10))
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    for i in range(1, n+1):
        print(i)
        if "t_debut"+str(i) in kwargs.keys():
            print(kwargs["t_debut"+str(i)])
            T = args[i-1]["t"][10:-10] - kwargs["t_debut"+str(i)]
        else:
            T = args[i-1]["t"][10:-10]
        a, b = linear_regOrignStart(T, vitesses[i-1], 1)
        plt.plot(T, vitesses[i-1])
        plt.plot(T, reg(a, b)(T), "--")
        
    plt.title("Vitesse en fonction du temps")
    plt.xlabel("Temps (s)")
    plt.ylabel("Vitesse ($m.s^{-1}$)")
    plt.legend([f"vitesse {i//2}" if i % 2 == 0 else f"y = {linear_regOrignStart(args[i//2-1]['t'][10:-10] - kwargs.get(f't_debut{i//2}', 0), vitesses[i//2-1], 1)[0]:.6f}x + {linear_regOrignStart(args[i//2-1]['t'][10:-10] - kwargs.get(f't_debut{i//2}', 0), vitesses[i//2-1], 1)[1]:.6f}" for i in range(2, 2*n+2)])
    plt.grid()
    
    plt.subplot(1, 2, 2)
    currents = [kwargs.get(f"desc{i}", f"I = {i}A").split(" = ")[1].replace("A", "") for i in range(1, n+1)]
    slopes = []
    for i in range(1, n+1):
        if f"t_debut{i}" in kwargs.keys():
            T = args[i-1]["t"][10:-10] - kwargs[f"t_debut{i}"]
        else:
            T = args[i-1]["t"][10:-10]
        a, _ = linear_regOrignStart(T, vitesses[i-1], 1)
        slopes.append(a)
    currents = list(map(float, currents))
    plt.plot(currents, slopes, "o")
        
    # afficher les moyennes des accélérations sur le meme graph en rouge
    a_mean = []
    a_eccart_type = []
    for i in range(1, n+1):
        a_mean.append(np.sum(args[i-1]["a"])/len(args[i-1]["a"]))
        a_eccart_type.append(np.std(args[i-1]["a"]))
    plt.plot(currents, a_mean, "+")
    plt.errorbar(currents, a_mean, yerr=a_eccart_type, fmt='o', capsize=5, label="Écart-type")
        
    
    plt.title("Pentes des droites en fonction du courant")
    plt.xlabel("Courant (A)")
    plt.ylabel("acceleration ($m.s^{-2}$)")
    plt.grid()
        




if __name__ == "__main__":
    # data5 = getFile("data/experience5.csv")
    # t_debut_5 = 1.365 
    # data6 = getFile("data/experience6.csv")
    # t_debut_6 = 1.998
    # data9 = getFile("data/experience9.csv")
    # # compare_data(data5, data6, t_debut1 = t_debut_5, t_debut2 = t_debut_6, desc1 = "I = 1.58A", desc2 = "I = 2.01A")
    
    data11 = getFile("data/experience11b.csv")
    data12 = getFile("data/experience12.csv")
    data12b = getFile("data/experience12c.csv")
    data13 = getFile("data/experience13.csv")
    data13b = getFile("data/experience13b.csv")
    data13c = getFile("data/experience13c.csv")
    data15 = getFile("data/experience15.csv")
    data15b = getFile("data/experience15b.csv")
    
    # compare_datas(data15, data15b, t_debut1=9.066, t_debut2=9.066, desc1="I = 1A", desc2="I = 1A")
    
    # show_datas(data12b)
    # show_datas(data11)
    # compare_datas(data11, data12, data13, 
    #               t_debut1 = 8.859, t_debut2 = 6.923, t_debut3 = 5.896,
    #               desc1 = "I = 1A", desc2 = "I = 1.5A", desc3 = "I = 2A")
    compare_datas(data13, data13b, data13c, data11, data12, data12b,
                  t_debut1 = 5.896, t_debut2 = 5.896, t_debut3 = 5.896, t_debut4 = 8.859, t_debut5 = 6.923, t_debut6 = 7.652, 
                  desc1 = "I = 2A", desc2 = "I = 2A", desc3 = "I = 2A", desc4 = "I = 1A", desc5 = "I = 1.5A", desc6 = "I = 1.5A")
    
    plt.show()
    
    


  
  
  
    
#* cimetière du code mort
# def vitesse(data):
#     v_x = np.array([(data["x"][i] - data["x"][i+1])/(data["t"][i] - data["t"][i+1]) for i in range(len(data["x"])-1)])
#     v_y = np.array([(data["y"][i] - data["y"][i+1])/(data["t"][i] - data["t"][i+1]) for i in range(len(data["y"])-1)])
#     n = 10
#     return normeXY(filtreMoy(v_x, n), filtreMoy(v_y, n))
# print(norme(data))
#     print(data["a"])
#     print(np.max(data["a"]))
#     # plt.plot(data["t"], norme(data))
#     # plt.plot(data["t"], data["x"])
#     # plt.plot(data["t"], data["y"])
#     # plt.plot(data["t"], filtreMoy(data["v"], 10))
#     # plt.plot(data["t"], data["v"])
    
#     # plt.plot(data["t"][10: -10], integreXY(data["x"], data["y"], data["t"], 10))
#     # plt.plot(data["t"][20:-20], integre(integreXY(data["x"], data["y"], data["t"], 10), data["t"], 10))
    
    
#     # Calcul de la vitesse
#     vitesse = integreXY(data["x"], data["y"], data["t"], 10)

#     # Création d'une nouvelle figure pour afficher la vitesse et l'accélération côte à côte
#     plt.figure(figsize=(12, 6))

#     # Sous-figure pour la vitesse
#     plt.subplot(1, 2, 1)
#     plt.plot(data["t"], data["v"], "+-")
#     plt.plot(data["t"][10:-10], vitesse, "g-")
#     a, b, c = np.polyfit(data["t"][10:-10], vitesse, 2)
#     plt.plot(data["t"][10:-10], reg(a, b, c)(data["t"][10:-10]), "r--")
#     plt.title("Vitesse en fonction du temps")
#     plt.xlabel("Temps (t)")
#     plt.ylabel("Vitesse (v)")
#     plt.legend(["Vitesse", "y = {:.3f}x + {:.3f}".format(a, b)])
#     plt.grid()

#     # Sous-figure pour l'accélération
#     plt.subplot(1, 2, 2)
#     plt.plot(data["t"], filtreMoy(data["a"], 5))
#     plt.plot(data["t"], data["a"])
#     plt.title("Accélération filtrée et brute en fonction du temps")
#     plt.xlabel("Temps (t)")
#     plt.ylabel("Accélération (a)")
#     plt.legend(["Accélération filtrée", "Accélération brute"])
#     plt.grid()

#     # plt.tight_layout()
#     # plt.plot(data["t"], filtreMoy(data["a"], 5))
#     # plt.plot(data["t"], data["a"])
#     # plt.title("Accélération filtrée et brute en fonction du temps")
#     # plt.xlabel("Temps (t)")
#     # plt.ylabel("Accélération (a)")
#     # plt.legend(["Accélération filtrée", "Accélération brute"])
#     plt.text(0, 1.30, f"acceleration moyenne = {np.sum(data["a"])/len(data["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data["a"]): .3f}"+ " $m.s^{-2}$")
    
#     plt.show()    