from cv2 import compare
from matplotlib import lines
import matplotlib.pyplot as plt
import numpy as np
import csv
import pandas as pd

plt.rcParams.update({'font.size': 18})

def getFile(name:str):
    # le fichier doit etre prealablement formaté
    data = pd.read_csv(name)
    data.head()
    data = data.dropna()
    data = data.reset_index(drop=True)
    # print(data)
    return data

def norme(data):
    return np.sqrt(data["x"]**2 + data["y"]**2)

def normeXY(X, Y):
    return np.sqrt(X**2 + Y**2)

def filtreMoy(X, n):
    def moy(l):
        return sum(l)/len(l)
    return np.array([X[i] if i<=n or i>=len(X)-n else moy(X[i-n:i+n]) for i in range(len(X))])

def integre(X, T, n):
    return np.array([(X[i-n] - X[i+n])/(T[i-n] - T[i+n]) for i in range(n, len(X)-n)])

def integreXY(X, Y, T, n):
    v_x = integre(X, T, n)
    v_y = integre(Y, T, n)
    return normeXY(v_x, v_y)

def reg(*args):
    def reg2(x):
        return sum([args[i]*x**(len(args) - i -1) for i in range(len(args))])
    return reg2

def linear_regOrignStart(X, Y, n):
    i_start = next((i for i, x in enumerate(X) if x > 0), None)
    if i_start is None:
        raise ValueError("No positive value found in X.")
    return np.polyfit(X[i_start:], Y[i_start:], n)
    

def show_datas(data):
     # Calcul de la vitesse
    vitesse = integreXY(data["x"], data["y"], data["t"], 10)

    # Création d'une nouvelle figure pour afficher la vitesse et l'accélération côte à côte
    plt.figure(figsize=(12, 6))

    # Sous-figure pour la vitesse
    plt.subplot(1, 2, 1)
    # plt.plot(data["t"], data["v"], "+-")
    plt.plot(data["t"][10:-10], vitesse, "g-")
    a, b = np.polyfit(data["t"][10:-10], vitesse, 1)
    plt.plot(data["t"][10:-10], reg(a, b)(data["t"][10:-10]), "r--")
    plt.title("Vitesse en fonction du temps")
    plt.xlabel("Temps (t)")
    plt.ylabel("Vitesse (v)")
    plt.legend(["Vitesse", "y = {:.3f}x + {:.3f}".format(a, b)])
    plt.grid()

    # Sous-figure pour l'accélération
    plt.subplot(1, 2, 2)
    plt.plot(data["t"], filtreMoy(data["a"], 5))
    plt.plot(data["t"], data["a"])
    plt.title("Accélération filtrée et brute en fonction du temps")
    plt.xlabel("Temps (t)")
    plt.ylabel("Accélération (a)")
    plt.legend(["Accélération filtrée", "Accélération brute"])
    plt.grid()
    plt.text(0, 1.30, f"acceleration moyenne = {np.sum(data["a"])/len(data["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data["a"]): .3f}"+ " $m.s^{-2}$")
    
    
    


def compare_data(data1, data2, t_debut1 = 0, t_debut2 = 0, desc1 = "", desc2 = ""):
     # Calcul de la vitesse
    vitesse1 = integreXY(data1["x"], data1["y"], data1["t"], 10)
    vitesse2 = integreXY(data2["x"], data2["y"], data2["t"], 10)

    # Création d'une nouvelle figure pour afficher la vitesse et l'accélération côte à côte
    plt.figure(figsize=(12, 6))

    # Sous-figure pour la vitesse
    plt.subplot(1, 2, 1)
    # plt.plot(data["t"], data["v"], "+-")
    plt.plot(data1["t"][10:-10] - t_debut1, vitesse1, "r-")
    a, b = linear_regOrignStart(data1["t"][10:-10]-t_debut1, vitesse1, 1)
    plt.plot(data1["t"][10:-10]- t_debut1, reg(a, b)(data1["t"][10:-10]-t_debut1), "--", color="red")
    plt.plot(data2["t"][10:-10] - t_debut2, vitesse2, "b-")
    c, d = linear_regOrignStart(data2["t"][10:-10]-t_debut2, vitesse2, 1)
    plt.plot(data2["t"][10:-10]- t_debut2, reg(c, d)(data2["t"][10:-10]-t_debut2), "c--")
    plt.title("Vitesse en fonction du temps")
    plt.xlabel("Temps (s)")
    plt.ylabel("Vitesse ($m.s^{-1}$)")
    plt.legend([desc1, "y = {:.6f}x + {:.6f}".format(a, b), desc2, "y = {:.6f}x + {:.6f}".format(c, d)])
    plt.grid()

    # Sous-figure pour l'accélération
    plt.subplot(1, 2, 2)
    
    plt.plot(data1["t"], filtreMoy(data1["a"], 5))
    # plt.plot(data1["t"], data1["a"])
    plt.plot(data2["t"], filtreMoy(data2["a"], 5))
    # plt.plot(data2["t"], data2["a"])
    plt.title("Accélération filtrée et brute en fonction du temps")
    plt.xlabel("Temps (s)")
    plt.ylabel("Accélération ($m.s^{-2}$)")
    plt.legend(["accélération filtrée 1", "accélération brute 1", "accélération filtrée 2", "accélération brute 2"])
    plt.legend([desc1, desc2])
    plt.grid()
    # plt.text(0, 1.30, f"acceleration moyenne = {np.sum(data1["a"])/len(data1["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data1["a"]): .3f}"+ " $m.s^{-2}$")
    # plt.text(0, 1, f"acceleration moyenne = {np.sum(data2["a"])/len(data2["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data2["a"]): .3f}"+ " $m.s^{-2}$")    
    

def compare_datas(*args, **kwargs):    
    n = len(args)
    vitesses = []
    for i in range(1, n+1):
        vitesses.append(integreXY(args[i-1]["x"], args[i-1]["y"], args[i-1]["t"], 10))
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    for i in range(1, n+1):
        print(i)
        if "t_debut"+str(i) in kwargs.keys():
            print(kwargs["t_debut"+str(i)])
            T = args[i-1]["t"][10:-10] - kwargs["t_debut"+str(i)]
        else:
            T = args[i-1]["t"][10:-10]
        a, b = linear_regOrignStart(T, vitesses[i-1], 1)
        plt.plot(T, vitesses[i-1])
        plt.plot(T, reg(a, b)(T), "--")
        
    plt.title("Vitesse en fonction du temps")
    plt.xlabel("Temps (s)")
    plt.ylabel("Vitesse ($m.s^{-1}$)")
    plt.legend([f"vitesse {i//2}" if i % 2 == 0 else f"y = {linear_regOrignStart(args[i//2-1]['t'][10:-10] - kwargs.get(f't_debut{i//2}', 0), vitesses[i//2-1], 1)[0]:.6f}x + {linear_regOrignStart(args[i//2-1]['t'][10:-10] - kwargs.get(f't_debut{i//2}', 0), vitesses[i//2-1], 1)[1]:.6f}" for i in range(2, 2*n+2)])
    plt.grid()
    
    plt.subplot(1, 2, 2)
    currents = [kwargs.get(f"desc{i}", f"I = {i}A").split(" = ")[1].replace("A", "") for i in range(1, n+1)]
    slopes = []
    for i in range(1, n+1):
        if f"t_debut{i}" in kwargs.keys():
            T = args[i-1]["t"][10:-10] - kwargs[f"t_debut{i}"]
        else:
            T = args[i-1]["t"][10:-10]
        a, _ = linear_regOrignStart(T, vitesses[i-1], 1)
        slopes.append(a)
    currents = list(map(float, currents))
    plt.plot(currents, slopes, "o")
        
    # afficher les moyennes des accélérations sur le meme graph en rouge
    a_mean = []
    a_eccart_type = []
    for i in range(1, n+1):
        a_mean.append(np.sum(args[i-1]["a"])/len(args[i-1]["a"]))
        a_eccart_type.append(np.std(args[i-1]["a"]))
    plt.plot(currents, a_mean, "+")
    plt.errorbar(currents, a_mean, yerr=a_eccart_type, fmt='o', capsize=5, label="Écart-type")
    
        
    
    plt.title("Pentes des droites en fonction du courant")
    plt.xlabel("Courant (A)")
    plt.ylabel("acceleration ($m.s^{-2}$)")
    plt.grid()
        

def compare_data3(ids: list[int], experiences: pd.DataFrame, exp_datas, variable:str, desc="") -> None:
    # Figure for velocity curves
    plt.figure(figsize=(12, 6))
    for i, id in enumerate(ids):
        plt.subplot(1, len(ids), i + 1)
        data = exp_datas[id]
        for j in range(len(data)):
            t_debut = experiences.loc[experiences["id"] == id, "t_debut"].iloc[0][j] if experiences.loc[experiences["id"] == id, "t_debut"].iloc[0] else 0
            if t_debut == None: 
                t_debut = 0
            vitesse = integreXY(data[j]["x"], data[j]["y"], data[j]["t"], 10)
            T = data[j]["t"][10:-10] - t_debut
            a, b = linear_regOrignStart(T, vitesse, 1)
            plt.plot(T, vitesse, label=f"Pointage {j + 1}")
            plt.plot(T, reg(a, b)(T), "--", label=f"y = {a:.6f}x + {b:.6f}")
        plt.title(f"Vitesse pour ID {id}")
        plt.xlabel("Temps (s)")
        plt.ylabel("Vitesse ($m.s^{-1}$)")
        plt.legend()
        plt.grid()
    
    # Figure for slopes and accelerations
    plt.figure(figsize=(12, 6))
    variableValue = []
    slopes = []
    means = []
    stds = []
    ids_for_points = []
    for id in ids:
        data = exp_datas[id]
        id_slopes = []
        for j in range(len(data)):
            t_debut = experiences.loc[experiences["id"] == id, "t_debut"].iloc[0][j] if experiences.loc[experiences["id"] == id, "t_debut"].iloc[0] else 0
            if t_debut == None: 
                t_debut = 0
            T = data[j]["t"][10:-10] - t_debut
            vitesse = integreXY(data[j]["x"], data[j]["y"], data[j]["t"], 10)
            a, _ = linear_regOrignStart(T, vitesse, 1)
            # a = abs(a)
            slopes.append(a)
            id_slopes.append(a)
            variableValue.append(experiences.loc[experiences["id"] == id, variable].iloc[0])
            ids_for_points.append(id)
        means.append(np.mean(id_slopes))
        stds.append(np.std(id_slopes))
    a, b = np.polyfit(variableValue, slopes, 1)
    plt.plot(variableValue, reg(a, b)(np.array(variableValue)), "--", label=f"y = {a:.6f}x + {b:.6f}")
    plt.errorbar([experiences.loc[experiences["id"] == id, variable].iloc[0] for id in ids], means, yerr=STDM, fmt='g+', capsize=5, label="Écart-type Moyen")
    plt.errorbar([experiences.loc[experiences["id"] == id, variable].iloc[0] for id in ids], means, yerr=stds, fmt='r+', capsize=6, label="Écart-type")
    plt.plot(variableValue, slopes, "o", label="Pentes des droites")
    # Ajouter l'id de l'expérience sur chaque point
    for x, y, id_val in zip(variableValue, slopes, ids_for_points):
        plt.annotate(str(id_val), (x, y), textcoords="offset points", xytext=(5,5), ha='left', fontsize=10, color='blue')
    plt.title("acceleration par regression lineaire")
    plt.xlabel(desc)
    plt.ylabel("acceleration $m.s^{-2}$")
    plt.legend()
    plt.grid()
    
def compareDataSets(idSet: list[list[int]], experiences,exp_datas ,variable, desc=""):
    
    plt.figure(figsize=(12, 6))
    for set in idSet: 
        if id in set:
            data = exp_datas[id]
            for j in range(len(data)):
                t_debut = experiences.loc[experiences["id"] == id, "t_debut"].iloc[0][j] if experiences.loc[experiences["id"] == id, "t_debut"].iloc[0] else 0
                if t_debut == None: 
                    t_debut = 0
                vitesse = integreXY(data[j]["x"], data[j]["y"], data[j]["t"], 10)
                T = data[j]["t"][10:-10] - t_debut
                a, b = linear_regOrignStart(T, vitesse, 1)
                
def getAcceleration(id, index):
    # Calcul de la vitesse
    data = exp_datas[id]
    vitesse = integreXY(data[index]["x"], data[index]["y"], data[index]["t"], 10)
    # regression linéaire pour la vitesse
    t_debut = experiences.loc[experiences["id"] == id, "t_debut"].iloc[0][index] if experiences.loc[experiences["id"] == id, "t_debut"].iloc[0] else 0
    if t_debut == None: 
        t_debut = 0
    T = data[index]["t"][10:-10] - t_debut
    a, _ = linear_regOrignStart(T, vitesse, 1)
    return a


def eccartTypeMoyen():
    std = []
    for key, data in exp_datas.items():
        print(key)
        print(data)
        if len(data) >= 2:
            acells = []
            for j in range(len(data)):
                # print(j)
                # print(experiences.loc[experiences["id"] == id, "t_debut"].iloc[0])
                acells.append(getAcceleration(key, j))
            std.append(np.std(acells))
    return np.mean(std)
    
                        
    
    
    

def U_I():
    # Exclure la masse 80g
    filtered_experiences = experiences[experiences["mass"] != 80]
    unique_epaisseurs = filtered_experiences["e"].unique()
    unique_masses = filtered_experiences["mass"].unique()
    colors = plt.cm.viridis(np.linspace(0, 1, len(unique_masses)))
    markers = ['o', 's', '^', 'D', 'v', 'P', '*', 'X', '<', '>', 'h', 'H', 'p', '8']

    n_rows = 1
    n_cols = len(unique_epaisseurs)
    # Créez 3 figures séparées, une pour chaque épaisseur unique
    figs_axes = []
    for idx in range(n_cols):
        fig, ax = plt.subplots(figsize=(6, 6))
        figs_axes.append((fig, ax))
    axes = [ax for fig, ax in figs_axes]
    if n_cols == 1:
        axes = [axes]

    for idx, ep in enumerate(unique_epaisseurs):
        ax = axes[idx]
        mask_ep = filtered_experiences["e"] == ep
        regression_done = set()
        for i, (mass, color) in enumerate(zip(unique_masses, colors)):
            mask = mask_ep & (filtered_experiences["mass"] == mass)
            U = filtered_experiences.loc[mask, "U"]
            I = filtered_experiences.loc[mask, "I"]
            if len(U) == 0:
                continue
            marker = markers[i % len(markers)]
            ax.plot(U, I, marker, label=f"m = {mass}g", color=color, linestyle='None')

            # Calcul de la droite de régression (une seule fois par masse)
            if len(U) > 1 and mass not in regression_done:
                a, b = np.polyfit(U, I, 1)
                ax.plot(U, a * U + b, "--", color=color, label=f"y = {a:.3f}x + {b:.3f} (m={mass}g)")
                regression_done.add(mass)

        ax.set_title(f"Épaisseur e = {ep} cm")
        ax.set_xlabel("Tension (U) [V]")
        ax.set_ylabel("Courant (I) [A]")
        ax.grid()
        # ax.legend(loc="upper left")

    plt.tight_layout()
    plt.show()
    
def a_puissance():
    fig = plt.figure(figsize=(12, 6))
    # crée le graphe le l'acceleration en fonction de la puissance delevré pas le generateur
    P = np.array([experiences.loc[experiences["id"] == id, "I"].iloc[0] * experiences.loc[experiences["id"] == id, "U"].iloc[0] for id in experiences["id"] if id in exp_datas.keys()])
    Amoy = []
    for id in experiences["id"]:
        if id in exp_datas.keys():
            data = exp_datas[id]
            a_exp = []
            for j in range(len(data)):
                a = getAcceleration(id, j)
                a_exp.append(a)
            amoy = np.mean(a_exp)
            Amoy.append(amoy)
            # Annoter l'id sur chaque point
            plt.annotate(str(id), (P[len(Amoy)-1], amoy), textcoords="offset points", xytext=(5,5), ha='left', fontsize=10, color='blue')
    b, c = np.polyfit(P, Amoy, 1)
    plt.plot(P, reg(b, c)(P), "--", label=f"y = {b:.6f}x + {c:.6f}")
    plt.legend([f"y = {b:.6f}x + {c:.6f}"])
    plt.plot(P, Amoy, "o")
    

experiences = pd.DataFrame({"id": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
                            "I": [1, 1.5, 2, 2.490, 1, 1.5, 2, 2.5, 1.0, 1.5, 2.0, 2.5, 2.5, 3.0, 3, 3, 2.5, 3.0, 1.0, 2.0, 3.0, 2.5, 1.0, 2.0, 3.0, 1, 1, 2, 3, 3, 1, 1, 1, 2, 3, 3], # Courant
                            "U": [2.5, 3.2, 3.8, 4.5, 2.0, 2.7, 3.0, 3.6, 2.7, 2.7, 3.0, 3.6, 3.7, 4.4, 4.4, 4.4, 3.2, 3.6, 1.6, 2.5, 3.4, 2.9, 1.6, 2.2, 3.0, 1.6, 1.5, 2.4, 3.2, 3.2, 1.4, 1.4, 2.0, 3.0, 4.7, 3.2],                         # Tension appliqué
                            "t_debut": [[8.859, 0], [6.923] * 4, [5.896] * 3, [None] * 0, [9.066] * 2, [13.281] * 2,
                                        [7.106] * 2, [0.0] * 1, [None] * 1, [None] * 1, [None] * 1, [None] * 1, 
                                        [11.621] * 3, [5.167] * 2, [9.855] * 2, [5.9]*3,  [None] * 2, [None]*2, [None] * 2,
                                        [None] * 2,  [None] * 2, [None] * 2,[None] * 1,  [None] * 1, [None] * 1,
                                        [None] * 2,  [None] * 2, [None] * 3,[None] * 2,  [None] * 2, [None] * 2, [None] * 1,
                                        [None] * 1,  [4.015] * 1, [None] * 2,[None] * 1
                                        ], #temps d'activation du moteur MHD
                            "mass": [40, 40, 40, 40, 60, 60, 60, 60, 80, 80, 60, 60, 40, 40, 40, 40, 60, 60, 75, 75, 75, 75, 100, 100, 100, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40],                                  #masse de sel ajouté
                            "V": [300 for i in range(36)],                                                             #volume d'eau
                            "e": [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1.5 ],                         #epaisseur en cm
                            "nb_p": [2, 4, 3, 0, 2, 2, 2, 1, 1, 1, 1, 1, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 3, 2, 2, 2, 1, 1, 1, 2, 1],                                              # nombre de pointage
                            "utilisable": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
                            
                            })

# exp_datas = {
#     id: [getFile(f"data/experience{id}.csv")] if (experiences.loc[experiences["id"] == id, "nb_p"].iloc[0] == 1 and experiences.loc[experiences["id"] == id, "utilisable"].iloc[0] == 1)
#     else [getFile(f"data/experience{id}{chr(i)}.csv") for i in range(97, 97 + experiences.loc[experiences["id"] == id, "nb_p"].iloc[0])*experiences.loc[experiences["id"] == id, "utilisable"].iloc[0]]
#     for id in experiences["id"]
# }  # dictionnaire des données d'experience
# print(exp_datas)

exp_datas = {}  # Initialisation du dictionnaire

for id in experiences["id"]:
    try:
        if (experiences.loc[experiences["id"] == id, "nb_p"].iloc[0] == 1 and 
            experiences.loc[experiences["id"] == id, "utilisable"].iloc[0] == 1):
            exp_datas[id] = [getFile(f"data/experience{id}.csv")]
        else:
            nb_p = experiences.loc[experiences["id"] == id, "nb_p"].iloc[0]
            utilisable = experiences.loc[experiences["id"] == id, "utilisable"].iloc[0]
            exp_datas[id] = [
                getFile(f"data/experience{id}{chr(i)}.csv") 
                for i in range(97, 97 + nb_p) * utilisable
            ]
    except Exception as e:
        print(f"\033[91mErreur pour l'ID {id}: {e}\033[0m")



def check_null_characters():
    for id in experiences["id"]:
        file_path = "data/experience" + str(id) + ".csv"
        if id >= 18 and experiences.loc[experiences["id"] == id, "utilisable"].iloc[0] == 1:
            with open(file_path, 'rb') as f:  # Ouvrir en mode binaire
                content = f.read()
                if b'\x00' in content:
                    print(f"Le fichier {file_path} contient des caractères nuls.")
                else:
                    print(f"Le fichier {file_path} ne contient pas de caractères nuls.")



if __name__ == "__main__":
    STDM = eccartTypeMoyen()
    # compare_data3([11, 38, 39, 43, 45], experiences, exp_datas, "e", desc="Epaisseur (cm)")
    
    
    #* courrant 
    # compare_data3([35, 36, 37], experiences, exp_datas, "I", desc="I (A)") # I5       :
    
    # compare_data3([11, 12, 13, 25, 26, 27, 28, 48], experiences, exp_datas, "I", desc="I (A)") # pas mal I1
    # compare_data3([15, 16, 17, 21, 22, 29, 30], experiences, exp_datas, "I", desc="I (A)") # I2       :18
    # compare_data3([31, 32, 33], experiences, exp_datas, "I", desc="I (A)") # I3       :34
    # compare_data3([19, 20], experiences, exp_datas, "I", desc="I (A)") # I4       :
    # compare_data3([38, 39, 40, 41, 42, 43], experiences, exp_datas, "I", desc="I (A)")
    
    
    
    #* masse de sel
    # compare_data3([11, 19, 31, 35], experiences, exp_datas, "mass", desc="Masse de sel (g)") # m1   #15
    
    # compare_data3([13,17,21,32,36], experiences, exp_datas, "mass", desc="Masse de sel (g)") # m2
    # compare_data3([14, 25, 29, 34, 22], experiences, exp_datas, "mass", desc="Masse de sel (g)") # m3
    # compare_data3([12, 16, 20], experiences, exp_datas, "mass", desc="Masse de sel (g)" ) #m4  
    # compare_data3([27, 28, 30,  33, 37, 48], experiences, exp_datas, "mass", desc="Masse de sel (g)")#m5

    #* epaisseur
    # compare_data3([11, 38, 39, 45], experiences, exp_datas, "e", desc="Epaisseur (cm)") # e1 # 38
    # compare_data3([40, 46], experiences, exp_datas, "e", desc="Epaisseur (cm)") # e2
    # compare_data3([41, 42, 47, 48], experiences, exp_datas, "e", desc="Epaisseur (cm)") # e3
    
    # a_puissance()
    U_I()
    plt.show()
    
    
    
    
    
    
    
    
    # compare_data3([15, 16, 17, 18], experiences, exp_datas, "I", desc="Courant (A)")
    # compare_data3([11, 12, 13], experiences, exp_datas, "I", desc="Courant (A)")
    # print(experiences)
    # print(experiences.loc[experiences["I"] == 1.5])
    # print(experiences.loc[experiences["I"] == 2])
    # print(experiences.loc[experiences["I"] == 2.5])
    # # compare_data3([11,15, 19], experiences, exp_datas, "mass", desc="mass de sel en (g)")
    # # compare_data3([12, 16, 20], experiences, exp_datas, "mass", desc="mass de sel en (g)")
    # # compare_data3([13, 17, 21], experiences, exp_datas, "mass", desc="mass de sel en (g)")
    # compare_data3([13, 17, 21, 32, 40, 46], experiences, exp_datas, "mass", desc="mass de sel en (g)")
    # plt.show()
    
    
 
 
 
#!#################################################################################################################################   

    
    # data5 = getFile("data/experience5.csv")
    # t_debut_5 = 1.365 
    # data6 = getFile("data/experience6.csv")
    # t_debut_6 = 1.998
    # data9 = getFile("data/experience9.csv")
    # # compare_data(data5, data6, t_debut1 = t_debut_5, t_debut2 = t_debut_6, desc1 = "I = 1.58A", desc2 = "I = 2.01A")
    
    # data11 = getFile("data/experience11.csv")
    # data12 = getFile("data/experience12a.csv")
    # data12b = getFile("data/experience12c.csv")
    # data13 = getFile("data/experience13a.csv")
    # data13b = getFile("data/experience13b.csv")
    # data13c = getFile("data/experience13c.csv")
    # data15 = getFile("data/experience15a.csv")
    # data15b = getFile("data/experience15b.csv")
    # data16 = getFile("data/experience16a.csv")
    # data16b = getFile("data/experience16b.csv")
    # data17 = getFile("data/experience17a.csv")
    # data17b = getFile("data/experience17b.csv")
    # data18 = getFile("data/experience18.csv")
    
    # compare_datas(data15, data15b, data16, data16b, data17, data17b,
    #               t_debut1=9.066, t_debut2=9.066, t_debut3=13.281, t_debut4 =13.281, t_debut5=7.106, t_debut6=7.106,
    #               desc1="I = 1A", desc2="I = 1A", desc3="I = 1.5A", desc4="I = 1.5A", desc5="I = 2.0A", desc6="I = 2.0A")
    
    # show_datas(data12b)
    # show_datas(data11)
    # compare_datas(data11, data12, data13, 
    #               t_debut1 = 8.859, t_debut2 = 6.923, t_debut3 = 5.896,
    #               desc1 = "I = 1A", desc2 = "I = 1.5A", desc3 = "I = 2A")
    # compare_datas(data13, data13b, data13c, data11, data12, data12b,
    #               t_debut1 = 5.896, t_debut2 = 5.896, t_debut3 = 5.896, t_debut4 = 8.859, t_debut5 = 6.923, t_debut6 = 7.652, 
    #               desc1 = "I = 2A", desc2 = "I = 2A", desc3 = "I = 2A", desc4 = "I = 1A", desc5 = "I = 1.5A", desc6 = "I = 1.5A")
    
    
    


  
  
  
    
#* cimetière du code mort
# def vitesse(data):
#     v_x = np.array([(data["x"][i] - data["x"][i+1])/(data["t"][i] - data["t"][i+1]) for i in range(len(data["x"])-1)])
#     v_y = np.array([(data["y"][i] - data["y"][i+1])/(data["t"][i] - data["t"][i+1]) for i in range(len(data["y"])-1)])
#     n = 10
#     return normeXY(filtreMoy(v_x, n), filtreMoy(v_y, n))
# print(norme(data))
#     print(data["a"])
#     print(np.max(data["a"]))
#     # plt.plot(data["t"], norme(data))
#     # plt.plot(data["t"], data["x"])
#     # plt.plot(data["t"], data["y"])
#     # plt.plot(data["t"], filtreMoy(data["v"], 10))
#     # plt.plot(data["t"], data["v"])
    
#     # plt.plot(data["t"][10: -10], integreXY(data["x"], data["y"], data["t"], 10))
#     # plt.plot(data["t"][20:-20], integre(integreXY(data["x"], data["y"], data["t"], 10), data["t"], 10))
    
    
#     # Calcul de la vitesse
#     vitesse = integreXY(data["x"], data["y"], data["t"], 10)

#     # Création d'une nouvelle figure pour afficher la vitesse et l'accélération côte à côte
#     plt.figure(figsize=(12, 6))

#     # Sous-figure pour la vitesse
#     plt.subplot(1, 2, 1)
#     plt.plot(data["t"], data["v"], "+-")
#     plt.plot(data["t"][10:-10], vitesse, "g-")
#     a, b, c = np.polyfit(data["t"][10:-10], vitesse, 2)
#     plt.plot(data["t"][10:-10], reg(a, b, c)(data["t"][10:-10]), "r--")
#     plt.title("Vitesse en fonction du temps")
#     plt.xlabel("Temps (t)")
#     plt.ylabel("Vitesse (v)")
#     plt.legend(["Vitesse", "y = {:.3f}x + {:.3f}".format(a, b)])
#     plt.grid()

#     # Sous-figure pour l'accélération
#     plt.subplot(1, 2, 2)
#     plt.plot(data["t"], filtreMoy(data["a"], 5))
#     plt.plot(data["t"], data["a"])
#     plt.title("Accélération filtrée et brute en fonction du temps")
#     plt.xlabel("Temps (t)")
#     plt.ylabel("Accélération (a)")
#     plt.legend(["Accélération filtrée", "Accélération brute"])
#     plt.grid()

#     # plt.tight_layout()
#     # plt.plot(data["t"], filtreMoy(data["a"], 5))
#     # plt.plot(data["t"], data["a"])
#     # plt.title("Accélération filtrée et brute en fonction du temps")
#     # plt.xlabel("Temps (t)")
#     # plt.ylabel("Accélération (a)")
#     # plt.legend(["Accélération filtrée", "Accélération brute"])
#     plt.text(0, 1.30, f"acceleration moyenne = {np.sum(data["a"])/len(data["a"]): .3f}" + " $m.s^{-2}$" + f"\nacceleration max = {np.max(data["a"]): .3f}"+ " $m.s^{-2}$")
    
#     plt.show()    